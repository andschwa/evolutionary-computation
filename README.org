#+TITLE:     Project #3 Santa Fe Trail
#+AUTHOR:    Andrew Schwartzmeyer
#+EMAIL:     schw2620@vandals.uidaho.edu
#+DATE:      2014-04-08 Tue
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LATEX_HEADER: \usepackage{lmodern}

#+BEGIN_ABSTRACT
For the University of Idaho's Evolutionary Computation (CS 472)
Project #3 I implemented a Santa Fe Trail program in C++ to evolve a
random decision tree for an "ant" to obtain as much food as possible.
Algorithm details available in the table below.  This implementation
achieves fitnesses (food eaten, out of 90) up to 78.  The code can be
found at: =https://github.com/andschwa/uidaho-cs472-project3=
#+END_ABSTRACT

* Build :noexport:
Makes use of autotools. Necessary files:
- configure.ac (with help from autoscan)
- Makefile.am
- m4/* for macros

To configure and build:
#+begin_src sh
autoreconf -vfi && ./configure && make
#+end_src

Boost must be built using the same compiler, so for OS X,
=./tools/build/v2/user-config.jam= needs the directive =using darwin :
4.8 : g++-4.8 ;=. This will force the darwin toolset to use =g++-4.8=
(install via homebrew).

Boost should then be bootstrapped like thus:

#+begin_src sh
./bootstrap.sh --with-libraries=program_options --with-toolset=darwin
#+end_src

And then built with =./b2= and installed with =./b2 install=.

* Assignment :noexport:
** DONE Project #2a Genetic Program
   DEADLINE: <2014-03-07 Fri>
[[http://www2.cs.uidaho.edu/~cs472_572/s14/GPProjectA.html][From Professor Terry Soule]]
This is the first subproject of the GP project. The goal of this
subproject is to create a population of GP tree structures for a
symbolic regression problem.  If you want to use it, or refer to it, I
have written a node and an individual class that uses pointers to
build and evaluate random expression trees. Trees are build of nodes,
which point to each other.

node.h
node.cpp
individual.h
individual.cpp
test.cpp

To compile the test main program use:

=g++ test.cpp node.cpp individual.cpp=

For this subproject you only need the following functionallity:

- Generate full random expression individuals.
- The expression trees should have, at least, the non-teminals: +,
  -, *, /.
- The expression trees should have, at least, the teminals: X (the
  input variable) and constants.
- The ability to copy individuals.
- The ability to evaluate individuals.
- The ability to erase individuals.
- The ability to calculate the size (number of terminals and
  non-terminals) of individuals.
- The ability to create a population of individuals and to find the
  best and average fitness of the population, and the average size of
  the individuals in the population.
- Individuals should represent expression trees, but may be coded as a
  different type of data structure (e.g. a tree stored in an
  array). For now you may choose your own fitness function, i.e. your
  own set of x,y points that the GP should evolved an expression to
  fit.

For the report:

- Project Write-up: Write a short paper describing the results of your
  project that includes the following sections:
- Algorithm descriptions - Description of the GP so far. Be careful to
  include all of the details someone would need to replicate your
  work.
- Individual description - Description of the structure of your
  individuals. Be careful to include all of the details someone would
  need to replicate your work.
- Results - Basically, does it seem to be working.
- Conclusions - If it's not working, why not. And what are then next
  steps to complete the project.

** DONE Project #2b Genetic Program
   DEADLINE: <2014-03-14 Fri>
This is the second subproject of the GP project. The goal of this subproject is to finish the pieces of the GP for a symbolic regression problem.
For this subproject you will need to complete the GP including the following functionallity (in addition to the functions from the previous assignment):

- [X] Add a conditional to the function set of the expression trees.
- [X] Mutation
- [X] Crossover of two trees
- [X] Selection
- [X] Elitism if you are using a generational model
- [X] Test the GP to make sure that it is working.

Project Write-up: For this subproject you only need a description of
the general algorithm:

- [X] generational or steady-state
- [X] how mutation works
- [X] the selction mechanism, etc.
- [X] a description of any problems so far

Note that the write-up may be fairly short.
** DONE Project #2 Genetic Program
   DEADLINE: <2014-03-23 Sun>

This is the final part of Project 2. For this project you need to
present a summary of your GP program and the results. Here is a
template for the summary in Word and pdf (and the latex). Note that
for this project you do not need to do a lot of writting. An abstract,
fill in the table summarizing your algorithms, two graphs, and a
conclusion/discussion.

Given function:
[
if (x < -9)
y = 0.4 * ((20 + x)^{2} + 7 * x)
else if (x < 10)
y = 0.5 * x
else
 y = x + 5 * sin(0.5 * x)
] + random(5, -5)

** DONE Project #3 Project #3 Santa Fe Trail
   DEADLINE: <2014-04-14 Mon>

For this project you need to create a genetic program for the Santa Fe
Trail problem. You will probably want to work from (a copy of) the
code for Project 2. If so you will need to make the following changes:

- [X] Change the non-terminal/operator set to at least: prog2, prog3,
  and iffoodahead
- [X] Change the terminal/leaf set to at least: left, forward,
  right. (You may add additional non-termials or terminals if you
  want.)
- [X] Change the evaluate function at both the individual and node levels.

For the write-up you may use the same template as for Project 2, but
instead of a figure showing the best evolved function (Figure 2 in the
template) include at least one figure showing the path taken by the
best evolved ant. This does not have to be fancy graphics, an ASCII
figure will do.

* Algorithm Information
#+ATTR_LATEX: :align |l|p{4in}|
|------------------+-----------------------------------------------------------|
| Algorithm type   | Generational                                              |
|------------------+-----------------------------------------------------------|
| Population size  | 1024                                                      |
|------------------+-----------------------------------------------------------|
| Selection method | Tournament of size 3                                      |
|------------------+-----------------------------------------------------------|
| Elitism          | Replace random 2 offspring with previous best             |
|------------------+-----------------------------------------------------------|
| Crossover method | Subtree with 90 percent chance to choose an internal node |
|------------------+-----------------------------------------------------------|
| Crossover rate   | 80 percent                                                |
|------------------+-----------------------------------------------------------|
| Mutation method  | 2 percent chance per node to mutate                       |
|------------------+-----------------------------------------------------------|
| Operation set    | prog-2, prog-3, if-food-ahead                             |
|------------------+-----------------------------------------------------------|
| Terminal set     | left, right, forward                                      |
|------------------+-----------------------------------------------------------|
| Fitness function | Number of food pieces eaten                               |
|------------------+-----------------------------------------------------------|
| Size control     | Size penalty of 0.1 * total applied to fitness            |
|------------------+-----------------------------------------------------------|

** Details

Not much has changed since Project #2.  The genetic program was
revamped to imitate "ants" crawling along the Santa Fe Trail, with the
goal of finding and eating food.  The genetic algorithm, population
size, selection method, elitism, crossover method, and crossover rate
are the same as previous.

To do this, a map class was implemented which handled the details of
having a 32 by 32 toroidial grid of blank, food, and marked locations.
This map had a position struct for the (x, y) coordinate pair and
direction of the ant, along with the width and height of the grid, and
the current tick count, maximum ticks, score, and maximum score (that
is, available food).  Its primary interface was =left()=, =right()=,
=forward()= and =look()= functions; the first three increment the tick
count, where =left()= and =right()= change the ant's direction,
=forward()= moves the ant forward and consumes food (incrementing the
score need be), and =look()= returns a boolean value used by the
=if-food-ahead= function.  The individual's evaluate function receives
a =Map= object by value (a copy of the original), and passes that by
reference to the root node's evaluate function in a =while= loop
conditioned on the ant being =active()= (that is, still has ticks
left).  Inside the evaluation method, when the maximum number of steps
is reached, it returns.  In this way, the ant's "decision" tree can be
continusouly evaluted while updating the map with the corresponding
movements, with =prog-2=, =prog-3=, and =if-food-ahead= working as
expected (causing more than one move per evalution of the tree).

The mutation sequence is run on every new individual in the offspring
generation.  With a two percent chance per node, it mutates a leaf
node into another leaf node, and an internal node into another
internal node.  When an internal node of arity three (=prog-3=) is
mutated into one of arity two (=prog-2= and =if-food-ahead=), the last
child node is popped from its vector to correct the arity.
Conversely, when a node of arity two is mutated into one of arity
three, a new node is created.  This node is made with an equal chance
to be "grown" or "fully" generated.  Its maximum depth is randomly
chosen from between zero and four.  This depth range was chosen with
the consideration that the trees popped in the previous correction may
have been quite large and thus should be compensated for, but I
additionally did not want to introduce unwanted code growth.

The fitness of the ant is the number of food pieces it can eat on the
on the Santa Fe Trail subject to the constraint of 600 ticks, where a
tick is either turning left or right, or moving forward.  As such,
this became a maximization algorithm.  To control code growth, a size
penalty of ten percent of the total tree size is substracted from this
fitness when used in comparisons.  The adjusted fitness (as presented
graphically), is the score (that is, actual number of food pieces
eaten, no penalties applied) divided by the total number of food
pieces available (in our case, 90).

* Results

The graphs are to be found at the end of this report.

** Result #1

- Score: 75
- Elapsed time: 11.55s
- Size: 70
- Iterations: 1024
- Population size: 128
- Initial depth: 6

#+BEGIN_src
# 'x' is food and 'o' is ant trail
ooxo...o....o...o.....o...oooooo
o..o...o....ooooooooooo...o.....
o..o...o........o.....o..xox....
oooooooo........o.....o.x.o..ooo
o..o........o...o.....o.x.o..o..
o..ooooooooxo...ooooooooooo..o..
o..o......o.o.........o...o..o..
o..o..o...o.o.........o...o..o..
o..o..o...o.o.......x.o...o..o..
o..o..o...o.o.......oooooooooo..
o..o..o...o.o.......o.oooooooooo
...o..o...o.o.......o.....o.o...
...o..o...o.o.......o.....o.ox..
...o..o...o.o.......o.....o.o...
oooo..o...o.o.......o.....oooooo
......o...ooooooooooo..x....o...
......o.....o....x..........o...
ooooooo.....o...o...........oooo
......o.....o...o.......x.......
......o.....o...o..........x....
......o.....o...o...............
......o.....o...o...............
......o.....o...o.........o.....
......o.....o...o.....ox..o.....
.oooooooooooo...o.....o...o.....
.o....o.....o...o.....o...o.....
.o.o..o.....o...o.....o...o.....
.o.o..ooooooooooo.....o...o.....
.o.o...oooooooooo.....o...o.....
.o.o...o....o...o.....o...o.....
.oxoxx.o....o...o.....o...o.....
.o.o...o....o...o.....o...o.....
#+END_src

** Result #2

- Score: 74
- Elapsed time: 84.7s
- Size: 40
- Iterations: 1024
- Population size: 1024
- Initial depth: 7

#+BEGIN_SRC
# 'x' is food and 'o' is ant trail
ooxo...o....o...o.....o...oooooo
o..o...o....ooooooooooo...o.....
o..o...o........o.....o..xox....
oooooooo........o.....o.x.o..ooo
o..o........o...o.....o.x.o..o..
o..ooooooooxo...ooooooooooo..o..
o..o......o.o.........o...o..o..
o..o..o...o.o.........o...o..o..
o..o..o...o.o.......x.o...o..o..
o..o..o...o.o.......oooooooooo..
o..o..o...o.o.......o.oooooooooo
...o..o...o.o.......o.....o.o...
...o..o...o.o.......o.....o.ox..
...o..o...o.o.......o.....o.o...
oooo..o...o.o.......o.....oooooo
......o...ooooooooooo..x....o...
......o.....o....x..........o...
ooooooo.....o...o...........oooo
......o.....o...o.......x.......
......o.....o...o..........x....
......o.....o...o...............
......o.....o...o...............
......o.....o...o.........o.....
......o.....o...o.....ox..o.....
.oooooooooooo...o.....o...o.....
.o....o.....o...o.....o...o.....
.o.o..o.....o...o.....o...o.....
.o.o..ooooooooooo.....o...o.....
.o.o...oooooooooo.....o...o.....
.o.o...o....o...o.....o...o.....
.oxoxx.o....o...o.....o...o.....
.o.o...o....o...o.....o...o.....
#+END_SRC

* Result #3

- Score: 78
- Elapsed time: 72.70s
- Size: 54
- Iterations: 1024
- Population size: 1024
- Initial depth: 8

#+BEGIN_SRC
# 'x' is food and 'o' is ant trail
oooo...o..............o.o....o..
oooo...o..............o.o....o..
.ooo...o................oxxx.o..
.ooo...o................o....o..
.oooooooooooo...........o....o..
..ooooooooooooooooooooooo....o..
oooo...o....o.o..........ooooooo
..o....o....o.o..........o...o..
..o....o....o.o.....x....o...o..
..o.........o.o.....x....o...o..
..o.........o.o.....oooooooooo..
..o.......ooooooooooo....o......
..o.......o.o.o.....o....o...x..
..o.......o.ooooooooooo..o......
..o.......o.o.o.....o.o..oxxx...
o.........o.o.o.....o.oooooooooo
o.........o.o...oooooooooo......
o.........o.o...o...o.o..o......
o.........o.o...o...o.o.xo......
o.........o.o...o...o.o..o.x....
o.........o.o...o...o.o..o......
o.........o.o...o...o.o..o......
o...........o...o.....o..ox.....
o...........o...o.....oooooooooo
o..oooooooooo...o.....o..o......
oooo............o.....o.oooooooo
oooo............o.....o.oo......
oooo...oooooooooo.....o.o.......
oooo...o..............o.o.......
oooo...o..............o.o.......
oooooooo..............o.o....ooo
oooo...o..............o.o....o..
#+END_SRC


* Conclusion

I found that although I could get good fitnesses, I was not able to
find parameters that would yield a full solution (fitness of 90).  I
am in the process of implementing more genetic operators, with the
hope that the extra diversity they will provide will help to increase
the average fitness.  As is clear from the graphs, the average fitness
plateaus relatively quickly (although for results two and three, this
is because of the excessive number of iterations; the best plateaued
as well).  Additionally, after inspecting sizes and depths (not
represented here due to time constraints), I found that the cause of
the lack of diversity was due to small tree sizes, and interestingly
low depths.  I was onto this when generating the presented results, as
I kept increasing the maximum depth for ramped half-and-half.  I
believe I would get better results by bumping that up further, and
adding more genetic matierial to the population.  In this way, the
individuals may not stagnate, and thus should produce closer to
perfect solutions.

In summary: ants are hard.

#+CAPTION: Best and average fitness for result #1
#+NAME: fig:fitness-1
[[./results/1.png]]

#+CAPTION: Best and average fitness for result #2
#+NAME: fig:fitness-2
[[./results/2.png]]

#+CAPTION: Best and average fitness for result #3
#+NAME: fig:fitness-3
[[./results/3.png]]
