#+TITLE:     Project #4 Brood Recombination
#+AUTHOR:    Andrew Schwartzmeyer
#+EMAIL:     schw2620@vandals.uidaho.edu
#+DATE:      2014-05-09 Fri
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LATEX_HEADER: \usepackage{lmodern}

#+BEGIN_ABSTRACT
For the University of Idaho's Evolutionary Computation (CS 472)
Project #4 I studied the cost of brood recombination for increasing
performance on the Santa Fe Trail problem.

The code can be found at:
=https://github.com/andschwa/uidaho-cs472-project4=
#+END_ABSTRACT

* Build :noexport:
Makes use of autotools. Necessary files:
- configure.ac (with help from autoscan)
- Makefile.am
- m4/* for macros

To configure and build:
#+begin_src sh
autoreconf -vfi && ./configure && make
#+end_src

Boost must be built using the same compiler, so for OS X,
=./tools/build/v2/user-config.jam= needs the directive =using darwin :
4.8 : g++-4.8 ;=. This will force the darwin toolset to use =g++-4.8=
(install via homebrew). See

Boost should then be bootstrapped like thus:

#+begin_src sh
./bootstrap.sh --with-libraries=program_options --with-toolset=darwin
#+end_src

And then built with =./b2= and installed with =./b2 install=.

* Assignment :noexport:
** DONE Project #2a Genetic Program
   DEADLINE: <2014-03-07 Fri>
[[http://www2.cs.uidaho.edu/~cs472_572/s14/GPProjectA.html][From Professor Terry Soule]]
This is the first subproject of the GP project. The goal of this
subproject is to create a population of GP tree structures for a
symbolic regression problem.  If you want to use it, or refer to it, I
have written a node and an individual class that uses pointers to
build and evaluate random expression trees. Trees are build of nodes,
which point to each other.

node.h
node.cpp
individual.h
individual.cpp
test.cpp

To compile the test main program use:

=g++ test.cpp node.cpp individual.cpp=

For this subproject you only need the following functionallity:

- Generate full random expression individuals.
- The expression trees should have, at least, the non-teminals: +,
  -, *, /.
- The expression trees should have, at least, the teminals: X (the
  input variable) and constants.
- The ability to copy individuals.
- The ability to evaluate individuals.
- The ability to erase individuals.
- The ability to calculate the size (number of terminals and
  non-terminals) of individuals.
- The ability to create a population of individuals and to find the
  best and average fitness of the population, and the average size of
  the individuals in the population.
- Individuals should represent expression trees, but may be coded as a
  different type of data structure (e.g. a tree stored in an
  array). For now you may choose your own fitness function, i.e. your
  own set of x,y points that the GP should evolved an expression to
  fit.

For the report:

- Project Write-up: Write a short paper describing the results of your
  project that includes the following sections:
- Algorithm descriptions - Description of the GP so far. Be careful to
  include all of the details someone would need to replicate your
  work.
- Individual description - Description of the structure of your
  individuals. Be careful to include all of the details someone would
  need to replicate your work.
- Results - Basically, does it seem to be working.
- Conclusions - If it's not working, why not. And what are then next
  steps to complete the project.

** DONE Project #2b Genetic Program
   DEADLINE: <2014-03-14 Fri>
This is the second subproject of the GP project. The goal of this subproject is to finish the pieces of the GP for a symbolic regression problem.
For this subproject you will need to complete the GP including the following functionallity (in addition to the functions from the previous assignment):

- [X] Add a conditional to the function set of the expression trees.
- [X] Mutation
- [X] Crossover of two trees
- [X] Selection
- [X] Elitism if you are using a generational model
- [X] Test the GP to make sure that it is working.

Project Write-up: For this subproject you only need a description of
the general algorithm:

- [X] generational or steady-state
- [X] how mutation works
- [X] the selction mechanism, etc.
- [X] a description of any problems so far

Note that the write-up may be fairly short.
** DONE Project #2 Genetic Program
   DEADLINE: <2014-03-23 Sun>

This is the final part of Project 2. For this project you need to
present a summary of your GP program and the results. Here is a
template for the summary in Word and pdf (and the latex). Note that
for this project you do not need to do a lot of writting. An abstract,
fill in the table summarizing your algorithms, two graphs, and a
conclusion/discussion.

Given function:
[
if (x < -9)
y = 0.4 * ((20 + x)^{2} + 7 * x)
else if (x < 10)
y = 0.5 * x
else
 y = x + 5 * sin(0.5 * x)
] + random(5, -5)

** DONE Project #3 Project #3 Santa Fe Trail
   DEADLINE: <2014-04-14 Mon>

For this project you need to create a genetic program for the Santa Fe
Trail problem. You will probably want to work from (a copy of) the
code for Project 2. If so you will need to make the following changes:

- [X] Change the non-terminal/operator set to at least: prog2, prog3,
  and iffoodahead
- [X] Change the terminal/leaf set to at least: left, forward,
  right. (You may add additional non-termials or terminals if you
  want.)
- [X] Change the evaluate function at both the individual and node levels.

For the write-up you may use the same template as for Project 2, but
instead of a figure showing the best evolved function (Figure 2 in the
template) include at least one figure showing the path taken by the
best evolved ant. This does not have to be fancy graphics, an ASCII
figure will do.

** TODO Project #4
   DEADLINE: <2014-05-09 Fri>
The goal of this project is to perform an experiment to test a
hypothesis relating to evolutionary computation or to write an
evolutionary algorithm for a specific (challenging) application. The
exact hypothesis or application is up to you (but see subproject
4a). If you plan to test a hypothesis make sure that it is clear, well
defined, and reasonable to answer experimentally. Ideally you can
claim "if my hypothesis is correct and if I perform this experiment
then the result will be X and if the result is not X then my
hypothesis is incorrect".

The simpler and more specific your hypothesis is, the easier it will
be to do this project, and you should understand the reasoning behind
your hypothesis. For example, if your hypothesis is "using random
trails in the artificial ant/Sante Fe trail problem will improve
results" you're going to have a hard time - what does improve mean?
Why should they improve?

On the other hand if your hypothesis is "using random trails in the
artificial ant/Santa Fe trail problem will on average produce
individuals whose fitness is higher, although they may take longer to
evolve, because the random trails will force GP to evolve a more
general and hence more successful soluton" it's going to be much
easier to complete the project.

If you plan to tackle a specific application you should have a
specific reason why the application is interesting and challenging.

Project Requirements:

- A clearly defined hypothesis or applcation.
- A clearly defined experiment to test the hypothesis or a clearly
  defined algorithm for the application.
- The code to run the experiment. I strongly encourage you to figure
  out a way to reuse code from previous experiments.

Project Write-up: You must write a short paper describing the results
of your project. The paper should be formatted using the [[http://www.acm.org/sigs/publications/proceedings-templates][ACM SIG
Proceedings Templates]]. This is a standard format for many research
conferences. Note that there is a Word and a Latex template, you may
use either one.  The final paper should include the following
sections:

- Abstract - a short (~200 words) summary of what you did and what the
  results were.
- Introduction - including: the hypothesis or application, what
  evidence you have for and against the hypothesis or previous work on
  the applicaiton, include at least 3 published sources.
- Experiment description - including:
  - The test problem(s) used in the experiments.
  - A description of the evolutionary algorithm used in the
    experiments.
  - How fitness was measured.
  - What parameters were used.
  - If you are testing a hypothesis you should include a clear
    explanation of how the results would support, or refute, the
    hypothesis. You should be able to say, before running any
    experiments, 'if I get these results it means the hypothesis is
    confirmed (or at least supported) and if I get these results the
    hypothesis is refuted'.
- Results:
  - There should be at least 5-10 trials per experiment.
  - Include graphs and/or tables to make it easy to understand the
    results.
  - Make sure that the graphs and tables are clearly labeled.
  - Explain how the results support or refute your hypothesis or how
    well you algorithm did on the application problem.
- Conclusions
- References

* Requirements
** Hypothesis
Brood recombination is computationally effective at improving the
results of a genetic program solving the Santa Fe Trail problem, where
'computationally effective' means that the extra computation cost
incurred by the brood recombination process is compensated for by its
improvement to the crossover process. The 'effectiveness' is measured
by the final fitness divided by CPU time after a set number of
generations.

** Experiment details
#+ATTR_LATEX: :align |l|p{4in}|
| Property           | Value | Description                                                                             |
|--------------------+-------+-----------------------------------------------------------------------------------------|
| Algorithm type     |       | Generational                                                                            |
| Non-terminal set   |     3 | Prog2, Prog3, IfFoodAhead                                                               |
| Terminal set       |     3 | Left, Right, Forward                                                                    |
| Generations        |   512 | Number of generations per run                                                           |
| Population size    |  1024 | Number of individuals per generation                                                    |
| Evaluation ticks   |   600 | Number of ticks individual (ant) may use for evaluation                                 |
| Grow chance        |   0.5 | Ramped half-and-half initial tree / subtree mutation generation                         |
| Minimum depth      |     2 | Minimum initial tree / subtree mutation generation depth                                |
| Maximum depth      |     6 | Maximum initial tree / subtree mutation generation depth                                |
| Depth limit        |    14 | Maximum depth of tree before being selected out                                         |
| Tournament size    |     3 | Number of individuals drawn per tournament selection                                    |
| Elitism size       |     2 | Number of individuals replaced by best individual per generation                        |
| Fitter size        |   320 | Size of fitter population for over-selection                                            |
| Over-select chance |   0.8 | Chance that selection will be done from the fitter population                           |
| Crossover chance   |   0.9 | Chance per pair of individuals to undergo crossover / brood selection                   |
| Internals chance   |   0.9 | During subtree crossover, chance that selected nodes will be non-terminals              |
| Mutate chance      |  0.05 | Chance per individual that it will undergo mutation                                     |
| Brood size N       |   1-6 | Variable size of brood, where N pairs of individuals are created from a pair of parents |

*** Test problem
Although many problems are suitable to genetic programming, this study
specifically uses the Santa Fe trail problem as a search
space. According to Langdon and Poli in "Why Ants are Hard", this
search space has "multiple plateaus split by deep valleys and many
local and global optima," and as such, it has been found that genetic
programming (among other search techniques) barely out-perform random
search on the Ant problem (Langdon 1). This makes it an ideal control
problem for studying the effectiveness of brood
recombination. According to /Genetic Programming - An Introduction/,
it has been found that genetic programs with brood recombination
outperform those without it (Banzhaf 160). Brood recombination's
ability to increase the fitness of solutions found via genetic
programming is not in question (Banzhaf 160). The question this study
attempts to address is if this known ability fully compensates for the
computational cost of its implementation. Because the Santa Fe trail
problem has an exceptionally expensive evaluation stage, if brood
recombination compensates for itself on this problem, it is reasonable
to assume the same for less difficult problems.

**** Santa Fe Trail Implementation
This implementation of the Santa Fe trail closely resembles that of
Langdon and Poli's described in "Why Ants are Hard". This problem is
an agent-based simulation, where an artificial ant (the agent) must
evolve a program to find and eat as much food on the Santa Fe trail as
possible. The program is represented as a parse tree with the
non-terminal nodes "Prog2", "Prog3", and "IfFoodAhead" and the terminal
nodes "Left", "Right", and "Forward."

The "Prog2" and "Prog3" nodes follow the =progn= semantics of Lisp:
they are, respectively, a set of two or three instructions to execute
linearly. "IfFoodAhead" is a conditional whose predicate is the
existence of food in the cell directly in front of the ant, with two
control paths to take in the cases true or false for the predicate.

The "Left" and "Right" nodes respectively change the direction the ant
is facing; they do not change the ant's position. The "Forward" node
moves the ant one cell forward (in the direction it is facing).

The fitness of a particular individual is the number of food pieces
eaten after 600 time steps (ticks) on the Santa Fe trail, where one
tick is consumed by each terminal node executed (that is, "Left",
"Right", or "Forward"); non-terminal nodes do not consume ticks. This
is calculated by starting the ant in the Northeast corner of the Santa
Fe trail, which is a 32 by 32 toroidial grid of cells (where toroidal
essentially means the edges wrap-around, think Pac-Man), with the food
laid out according the Santa Fe trail. The ant's parse tree
(representing a potential solution) is then repeatedly evaluated in
full (by pre-order traversal), with each visited terminal node
consuming a tick and affecting the ant as previously defined.

*** Brood Recombination
The "Brood Recombination Operator" was originally introduced in
Tackett's paper "Recombination, Selection, and the Genetic
Construction of Computer Programs" (Tackett 85). It is founded in the
idea that parents in the animal kingdom usually produce a large number
of offspring, with the expectation that only the few most fit will
survive natural selection. The computational analogue to this is to
choose a brood size =N=, then for each pair of parents in the
population, =N= crossover operations are performed, producing =2*N=
children candidates. The most fit two of the brood are then chosen for
the output the recombination process.

**** Culling Function
Because evaluating every single "pup" of the brood is expensive,
Tackett suggests performing only a partial evalutation. Tackett refers
to this as a "culling function", capable of getting an "in the
ballpark" fitness of an individual, which is good enough for
distinguishing among a brood of children generated from the same
parents (Tackett 85). For the ant problem, I apply this principle in
combination with ideas from simulated annealing by scaling the number
of ticks the for which the evaluation is performed with the number of
generations for which the algorithm has been run. Specifically, I
start with a minimum evaluation of 10 percent (60 ticks), which
increases linearly to 100 percent (600 ticks) with the final
generation. In earlier generations, this achieves Tackett's "ballpark"
estimate, and in later generations is capable of distinguishing the
ants' fitnesses across the entire map. This last part is necessary
specifically on the ant problem with the Santa Fe trail as the very
end of the evaluation is also the most difficult for which to find a
solution.

*** Initial Population
The initial population is generated using the "ramped half-and-half"
method detailed by Eibein in /Introduction to Evolutionary
Computation/. Using the "grow chance" of 0.5, there is an equal chance
for each member of the initial population that it will be generated
using either the "grow method" or the "full method." Every tree branch
in the full method is grown to the maximum chosen depth (always
choosing random non-terminals until the maximum depth is reached, and
subsequently only choosing terminals) (Eiben 110). In this
implementation, the maximum depth is six. The algorithm for the "grow
method" of producing an initial tree is based on /A Field Guide to
Genetic Programming/, if at the maximum depth or if at any depth but
the root and a true value is drawn from a boolean distribution with
the chance calculated as size of terminal set divided by the sum of
the the sizes of the terminal set and the function set (so in our
case, =3/6=, or =1/2=), then a function is drawn from the terminal
set, otherwise it is drawn from the non-terminal set (Poli 14). Some
research has shown that ramped half-and-half is not particularly good
at generating potential solutions to the Santa Fe trail problem; a
better algorithm would perhaps Langdon's "ramped uniform
initialization" (Poli 40). However, in prior projects, I have found
that ramped half-and-half works well enough, and was unable to find
the details needed to implement ramped uniform initialization.

*** Selection Process
The selection mechanism used in this algorithm is composed of
tournament selection (of size three) with over-selection. Tournament
selection is simple: for each selection, three potential parents are
randomly drawn from the population, the best of which is selected to
be the parent. With over-selection, implemented as in /Introduction to
Evolutionary Computation/, the population is first sorted by fitness,
with the top 320 (of 1024) individuals designated as the "fitter"
population. When drawing members for the tournament, 80 percent of the
time the entire set (of three) are chosen from the fitter population,
the other 20 percent of the time the members are drawn from the less
fit portion of the population (Eiben 109).
