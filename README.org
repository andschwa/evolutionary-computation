#+TITLE:     Project #3 Santa Fe Trail
#+AUTHOR:    Andrew Schwartzmeyer
#+EMAIL:     schw2620@vandals.uidaho.edu
#+DATE:      2014-04-08 Tue
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LATEX_HEADER: \usepackage{lmodern}

#+BEGIN_ABSTRACT
For the University of Idaho's Evolutionary Computation (CS 472)
Project #2 I implemented a Genetic Program in C++ to evolve a random
mathematical function fitted via symbolic regression to Terry Soule's
provided test data.  The function is modeled as a parse tree,
implemented recursively.  Algorithm details available in the table
below.  This implementation can achieve varying degrees of fitness
depending on the parameters it is run with, especially the maximum
number of iterations.  The code can be found at: =https://github.com/andschwa/uidaho-cs472-project2=
#+END_ABSTRACT

* Build :noexport:
Makes use of autotools. Necessary files:
- configure.ac (with help from autoscan)
- Makefile.am
- m4/* for macros

To configure and build:
#+begin_src sh
autoreconf -vfi && ./configure && make
#+end_src

Boost must be built using the same compiler, so for OS X,
=user-config.jam= needs the directive =using gcc : 4.8 : g++-4.8
;=. Boost should then be bootstrapped like thus:

#+begin_src sh
./bootstrap.sh --with-libraries=program_options --with-toolset=gcc
#+end_src

And then built with =./b2= and installed with =./b2 install=.

* Assignment :noexport:
** DONE Project #2a Genetic Program
   DEADLINE: <2014-03-07 Fri>
[[http://www2.cs.uidaho.edu/~cs472_572/s14/GPProjectA.html][From Professor Terry Soule]]
This is the first subproject of the GP project. The goal of this
subproject is to create a population of GP tree structures for a
symbolic regression problem.  If you want to use it, or refer to it, I
have written a node and an individual class that uses pointers to
build and evaluate random expression trees. Trees are build of nodes,
which point to each other.

node.h
node.cpp
individual.h
individual.cpp
test.cpp

To compile the test main program use:

=g++ test.cpp node.cpp individual.cpp=

For this subproject you only need the following functionallity:

- Generate full random expression individuals.
- The expression trees should have, at least, the non-teminals: +,
  -, *, /.
- The expression trees should have, at least, the teminals: X (the
  input variable) and constants.
- The ability to copy individuals.
- The ability to evaluate individuals.
- The ability to erase individuals.
- The ability to calculate the size (number of terminals and
  non-terminals) of individuals.
- The ability to create a population of individuals and to find the
  best and average fitness of the population, and the average size of
  the individuals in the population.
- Individuals should represent expression trees, but may be coded as a
  different type of data structure (e.g. a tree stored in an
  array). For now you may choose your own fitness function, i.e. your
  own set of x,y points that the GP should evolved an expression to
  fit.

For the report:

- Project Write-up: Write a short paper describing the results of your
  project that includes the following sections:
- Algorithm descriptions - Description of the GP so far. Be careful to
  include all of the details someone would need to replicate your
  work.
- Individual description - Description of the structure of your
  individuals. Be careful to include all of the details someone would
  need to replicate your work.
- Results - Basically, does it seem to be working.
- Conclusions - If it's not working, why not. And what are then next
  steps to complete the project.

** DONE Project #2b Genetic Program
   DEADLINE: <2014-03-14 Fri>
This is the second subproject of the GP project. The goal of this subproject is to finish the pieces of the GP for a symbolic regression problem.
For this subproject you will need to complete the GP including the following functionallity (in addition to the functions from the previous assignment):

- [X] Add a conditional to the function set of the expression trees.
- [X] Mutation
- [X] Crossover of two trees
- [X] Selection
- [X] Elitism if you are using a generational model
- [X] Test the GP to make sure that it is working.

Project Write-up: For this subproject you only need a description of
the general algorithm:

- [X] generational or steady-state
- [X] how mutation works
- [X] the selction mechanism, etc.
- [X] a description of any problems so far

Note that the write-up may be fairly short.
** DONE Project #2 Genetic Program
   DEADLINE: <2014-03-23 Sun>

This is the final part of Project 2. For this project you need to
present a summary of your GP program and the results. Here is a
template for the summary in Word and pdf (and the latex). Note that
for this project you do not need to do a lot of writting. An abstract,
fill in the table summarizing your algorithms, two graphs, and a
conclusion/discussion.

Given function:
[
if (x < -9)
y = 0.4 * ((20 + x)^{2} + 7 * x)
else if (x < 10)
y = 0.5 * x
else
 y = x + 5 * sin(0.5 * x)
] + random(5, -5)

** TODO Project #3 Project #3 Santa Fe Trail
   DEADLINE: <2014-04-11 Fri>

For this project you need to create a genetic program for the Santa Fe
Trail problem. You will probably want to work from (a copy of) the
code for Project 2. If so you will need to make the following changes:

- [ ] Change the non-terminal/operator set to at least: prog2, prog3,
  and iffoodahead
- [ ] Change the terminal/leaf set to at least: left, forward,
  right. (You may add additional non-termials or terminals if you
  want.)
- [ ] Change the evaluate function at both the individual and node levels.

For the write-up you may use the same template as for Project 2, but
instead of a figure showing the best evolved function (Figure 2 in the
template) include at least one figure showing the path taken by the
best evolved ant. This does not have to be fancy graphics, an ASCII
figure will do.

* Algorithm Information
#+ATTR_LATEX: :align |l|p{4in}|
|------------------+-----------------------------------------------------------|
| Algorithm type   | Generational                                              |
|------------------+-----------------------------------------------------------|
| Population size  | 1024                                                      |
|------------------+-----------------------------------------------------------|
| Selection method | Tournament of size 3                                      |
|------------------+-----------------------------------------------------------|
| Elitism          | Replace random 2 offspring with previous best             |
|------------------+-----------------------------------------------------------|
| Crossover method | Subtree with 90 percent chance to choose an internal node |
|------------------+-----------------------------------------------------------|
| Crossover rate   | 80 percent (I think this should be lower)                 |
|------------------+-----------------------------------------------------------|
| Mutation method  | See GitHub issue #6                                       |
|------------------+-----------------------------------------------------------|
| Operation set    | prog2, prog3, if-food-ahead                               |
|------------------+-----------------------------------------------------------|
| Terminal set     | left, right, forward                                      |
|------------------+-----------------------------------------------------------|
| Fitness function | Number of food pieces eaten                               |
|------------------+-----------------------------------------------------------|
| Size control     | Undecided                                                 |
|------------------+-----------------------------------------------------------|

** Details

** Notes

* Discussion

* Conclusion
